{
  "manifest": {
    "name": "character-parser",
    "version": "1.2.1",
    "description": "Parse JavaScript one character at a time to look for snippets in Templates.  This is not a validator, it's just designed to allow you to have sections of JavaScript delimited by brackets robustly.",
    "main": "index.js",
    "scripts": {
      "test": "mocha -R spec"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/ForbesLindesay/character-parser.git"
    },
    "keywords": [
      "parser",
      "JavaScript",
      "bracket",
      "nesting",
      "comment",
      "string",
      "escape",
      "escaping"
    ],
    "author": {
      "name": "ForbesLindesay"
    },
    "license": "MIT",
    "devDependencies": {
      "better-assert": "~1.0.0",
      "mocha": "~1.9.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v2/npm-character-parser-1.2.1-c0dde4ab182713b919b970959a123ecc1a30fcd6/package.json",
    "readmeFilename": "README.md",
    "readme": "# character-parser\n\nParse JavaScript one character at a time to look for snippets in Templates.  This is not a validator, it's just designed to allow you to have sections of JavaScript delimited by brackets robustly.\n\n[![Build Status](https://img.shields.io/travis/ForbesLindesay/character-parser/master.svg)](https://travis-ci.org/ForbesLindesay/character-parser)\n\n## Installation\n\n    npm install character-parser\n\n## Usage\n\nWork out how much depth changes:\n\n```js\nvar state = parse('foo(arg1, arg2, {\\n  foo: [a, b\\n');\nassert(state.roundDepth === 1);\nassert(state.curlyDepth === 1);\nassert(state.squareDepth === 1);\nparse('    c, d]\\n  })', state);\nassert(state.squareDepth === 0);\nassert(state.curlyDepth === 0);\nassert(state.roundDepth === 0);\n```\n\n### Bracketed Expressions\n\nFind all the contents of a bracketed expression:\n\n```js\nvar section = parser.parseMax('foo=\"(\", bar=\"}\") bing bong');\nassert(section.start === 0);\nassert(section.end === 16);//exclusive end of string\nassert(section.src = 'foo=\"(\", bar=\"}\"');\n\n\nvar section = parser.parseMax('{foo=\"(\", bar=\"}\"} bing bong', {start: 1});\nassert(section.start === 1);\nassert(section.end === 17);//exclusive end of string\nassert(section.src = 'foo=\"(\", bar=\"}\"');\n```\n\nThe bracketed expression parsing simply parses up to but excluding the first unmatched closed bracket (`)`, `}`, `]`).  It is clever enough to ignore brackets in comments or strings.\n\n\n### Custom Delimited Expressions\n\nFind code up to a custom delimiter:\n\n```js\nvar section = parser.parseUntil('foo.bar(\"%>\").baz%> bing bong', '%>');\nassert(section.start === 0);\nassert(section.end === 17);//exclusive end of string\nassert(section.src = 'foo.bar(\"%>\").baz');\n\nvar section = parser.parseUntil('<%foo.bar(\"%>\").baz%> bing bong', '%>', {start: 2});\nassert(section.start === 2);\nassert(section.end === 19);//exclusive end of string\nassert(section.src = 'foo.bar(\"%>\").baz');\n```\n\nDelimiters are ignored if they are inside strings or comments.\n\n## API\n\n### parse(str, state = defaultState(), options = {start: 0, end: src.length})\n\nParse a string starting at the index start, and return the state after parsing that string.\n\nIf you want to parse one string in multiple sections you should keep passing the resulting state to the next parse operation.\n\nReturns a `State` object.\n\n### parseMax(src, options = {start: 0})\n\nParses the source until the first unmatched close bracket (any of `)`, `}`, `]`).  It returns an object with the structure:\n\n```js\n{\n  start: 0,//index of first character of string\n  end: 13,//index of first character after the end of string\n  src: 'source string'\n}\n```\n\n### parseUntil(src, delimiter, options = {start: 0, includeLineComment: false})\n\nParses the source until the first occurence of `delimiter` which is not in a string or a comment.  If `includeLineComment` is `true`, it will still count if the delimiter occurs in a line comment, but not in a block comment.  It returns an object with the structure:\n\n```js\n{\n  start: 0,//index of first character of string\n  end: 13,//index of first character after the end of string\n  src: 'source string'\n}\n```\n\n### parseChar(character, state = defaultState())\n\nParses the single character and returns the state.  See `parse` for the structure of the returned state object.  N.B. character must be a single character not a multi character string.\n\n### defaultState()\n\nGet a default starting state.\n\n### isPunctuator(character)\n\nReturns `true` if `character` represents punctuation in JavaScript.\n\n### isKeyword(name)\n\nReturns `true` if `name` is a keyword in JavaScript.\n\n## State\n\nA state is an object with the following structure\n\n```js\n{\n  lineComment: false, //true if inside a line comment\n  blockComment: false, //true if inside a block comment\n\n  singleQuote: false, //true if inside a single quoted string\n  doubleQuote: false, //true if inside a double quoted string\n  regexp:      false, //true if inside a regular expression\n  escaped: false, //true if in a string and the last character was an escape character\n\n  roundDepth: 0, //number of un-closed open `(` brackets\n  curlyDepth: 0, //number of un-closed open `{` brackets\n  squareDepth: 0 //number of un-closed open `[` brackets\n}\n```\n\nIt also has the following useful methods:\n\n- `.isString()` returns `true` if the current location is inside a string.\n- `.isComment()` returns `true` if the current location is inside a comment.\n- `isNesting()` returns `true` if the current location is anything but at the top level, i.e. with no nesting.\n\n## License\n\nMIT",
    "licenseText": "Copyright (c) 2013 Forbes Lindesay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/character-parser/-/character-parser-1.2.1.tgz#c0dde4ab182713b919b970959a123ecc1a30fcd6",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/character-parser/-/character-parser-1.2.1.tgz",
    "hash": "c0dde4ab182713b919b970959a123ecc1a30fcd6",
    "integrity": "sha1-wN3kqxgnE7kZuXCVmhI+zBow/NY=",
    "registry": "npm",
    "packageName": "character-parser"
  },
  "registry": "npm",
  "hash": "c0dde4ab182713b919b970959a123ecc1a30fcd6"
}